<SignUpV2> 	
	<Pages>
		<Page type="formvalues" value="otherRequiredInformation">
			<Name>step1</Name>
			<Direction>required</Direction>
			<Groups>
				<Group>1</Group>
				<Group>2</Group>
				<Group>3</Group>
			</Groups>
			<DisplayFields>
				<DisplayField>
					<DisplayText>First Name:</DisplayText>
					<DisplayOrder>1</DisplayOrder>
					<DataType>text</DataType>
					<IsRequired>true</IsRequired>
					<Group>1</Group>
					<InputFieldType>input</InputFieldType>
					<InputType>text</InputType>
					<InputID>txtFirstName</InputID>
					<InputTitle>firstname</InputTitle>
					<Validators>
						<Validator><!-- check for max string 50 -->
							<Type name="type">regex</Type>
							<Regex name="regex"></Regex>
							<ValidationField name="validationfield"></ValidationField>
							<ErrorMessage name="errormessage">Can Not Exceed 50 Characters</ErrorMessage>
							<JSONObject>
								<![CDATA[{type: "regex", regex: "^(.){0,50}$", validationfield: "", errormessage: "Can Not Exceed 50 Characters"}]]>
							</JSONObject>
						</Validator>
					</Validators>
					<PossibleValues></PossibleValues>
					<DataSource>Consumer</DataSource>
					<DataPath>FirstName</DataPath>
				</DisplayField>
				<DisplayField>
					<DisplayText>Last Name:</DisplayText>
					<DisplayOrder>2</DisplayOrder>
					<DataType>text</DataType>
					<IsRequired>false</IsRequired>
					<Group>1</Group>
					<InputFieldType>input</InputFieldType>
					<InputType>text</InputType>
					<InputID>txtLastName</InputID>
					<InputTitle>lastname</InputTitle>
					<Validators>
						<Validator><!-- check for max string 50 -->
							<Type name="type">regex</Type>
							<Regex name="regex"></Regex>
							<ValidationField name="validationfield"></ValidationField>
							<ErrorMessage name="errormessage">Can Not Exceed 50 Characters</ErrorMessage>
							<JSONObject>
								<![CDATA[{type: "regex", regex: "^(.){0,50}$", validationfield: "", errormessage: "Can Not Exceed 50 Characters"}]]>
							</JSONObject>
						</Validator>
					</Validators>
					<PossibleValues></PossibleValues>
					<DataPath>LastName</DataPath>
					<DataSource>Consumer</DataSource>
				</DisplayField>
				<DisplayField>
					<DisplayText>Email Address:</DisplayText>
					<DisplayOrder>3</DisplayOrder>
					<DataType>email</DataType>
					<IsRequired>true</IsRequired>
					<Group>2</Group>
					<InputFieldType>input</InputFieldType>
					<InputType>text</InputType>
					<InputID>txtEmailAddress</InputID>
					<InputTitle>email</InputTitle>
					<Validators>
						<Validator>
							<Type name="type">regex</Type>
							<!-- this regex pulled from Exact Target's Wiki http://wiki.memberlandingpages.com/API_References/Web_Service_Guide/_Technical_Articles/Using_Regular_Expressions_to_Validate_Email_Addresses-->
							<Regex name="regex">^([a-zA-Z0-9_\!\#\$\%\&amp;\'\*\-\/\=\?\^\`\{\|\}\~\.\+]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9_\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})$</Regex>
							<ValidationField name="validationfield"></ValidationField>
							<ErrorMessage name="errormessage">Invalid Email Address</ErrorMessage>
							<JSONObject>
								<![CDATA[{type: "regex", regex: "^([a-zA-Z0-9_\\!\\#\\$\\%\\&amp;\\'\\*\\-\\/\\=\\?\\^\\`\\{\\|\\}\\~\\.\\+]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9_\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})$", validationfield: "", errormessage: "Invalid Email Address" }]]>
							</JSONObject>
						</Validator>
						<Validator>
							<Type name="type">uniqueEmail</Type>
							<Regex name="regex"></Regex>
							<ValidationField name="validationfield"></ValidationField>
							<ErrorMessage name="errormessage">Invalid Email Address</ErrorMessage>
							<JSONObject>
								<![CDATA[{type: "uniqueEmail", regex: "", validationfield: "", errormessage: "This email address is already taken" }]]>
							</JSONObject>
						</Validator>
					</Validators>
					<PossibleValues></PossibleValues>
					<DataPath>Email</DataPath>
					<DataSource>Consumer</DataSource>
				</DisplayField>
				<DisplayField>
					<DisplayText>Username:</DisplayText>
					<DisplayOrder>4</DisplayOrder>
					<DataType>text</DataType>
					<IsRequired>false</IsRequired>
					<Group>2</Group>
					<InputFieldType>input</InputFieldType>
					<InputType>text</InputType>
					<InputID>txtUsername</InputID>
					<InputTitle>username</InputTitle>
					<Validators>
						<Validator>
							<Type name="type">uniqueUsername</Type>
							<Regex name="regex"></Regex>
							<ValidationField name="validationfield"></ValidationField>
							<ErrorMessage name="errormessage">Invalid Username</ErrorMessage>
							<JSONObject>
								<![CDATA[{type: "uniqueUsername", regex: "", validationfield: "", errormessage: "This username is already taken" }]]>
							</JSONObject>
						</Validator>
					</Validators>
					<PossibleValues></PossibleValues>
					<DataPath>UserName</DataPath>
					<DataSource>Consumer</DataSource>
				</DisplayField>
				<DisplayField>
					<DisplayText>Password:</DisplayText>
					<DisplayOrder>5</DisplayOrder>
					<DataType>text</DataType>
					<IsRequired>true</IsRequired>
					<Group>3</Group>
					<InputFieldType>input</InputFieldType>
					<InputType>password</InputType>
					<InputID>txtPassword</InputID>
					<InputTitle>password</InputTitle>
					<ErrorMessage name="errormessage"></ErrorMessage>
					<Validators>
						<Validator>
							<Type name="type">regex</Type>
							<Regex name="regex">.{6,20}</Regex>
							<ValidationField name="validationfield"></ValidationField>
							<ErrorMessage name="errormessage">Invalid Password</ErrorMessage>
							<JSONObject>
								<![CDATA[{type: "regex", regex: ".{6,20}", validationfield: "", errormessage: "Invalid Password" }]]>
							</JSONObject>
						</Validator>
					</Validators>
					<PossibleValues></PossibleValues>
					<DataPath>DecryptedPassword</DataPath>
					<DataSource>Consumer</DataSource>
				</DisplayField>
				<DisplayField>
					<DisplayText>Confirm Password:</DisplayText>
					<DisplayOrder>6</DisplayOrder>
					<DataType>text</DataType>
					<IsRequired>true</IsRequired>
					<Group>3</Group>
					<InputFieldType>input</InputFieldType>
					<InputType>password</InputType>
					<InputID>txtPasswordConfirm</InputID>
					<InputTitle>password2</InputTitle>
					<ValidationField name="validationfield">txtPassword</ValidationField>
					<ErrorMessage name="errormessage"></ErrorMessage>
					<Validators>
						<Validator>
							<Type name="type">regex</Type>
							<Regex name="regex">.{6,20}</Regex>
							<ValidationField name="validationfield"></ValidationField>
							<ErrorMessage name="errormessage">Invalid Password</ErrorMessage>
							<JSONObject>
								<![CDATA[{type: "regex", regex: ".{6,20}", validationfield: "", errormessage: "Invalid Password" }]]>
							</JSONObject>
						</Validator>
						<Validator>
							<Type name="type">field</Type>
							<Regex name="regex"></Regex>
							<ValidationField name="validationfield">txtPassword</ValidationField>
							<ErrorMessage name="errormessage">Passwords do not match</ErrorMessage>
							<JSONObject>
								<![CDATA[{type: "field", regex: "", validationfield: "txtPassword", errormessage: "Passwords do not match" }]]>
							</JSONObject>
						</Validator>
					</Validators>
					<PossibleValues></PossibleValues>
					<DataPath>DecryptedPassword</DataPath>
					<DataSource>Consumer</DataSource>
				</DisplayField>
			</DisplayFields>
		</Page>
		<Page type="formvalues" value="otherOptionalInformation">
			<Name>step2</Name>
			<Direction>optional</Direction>
			<Groups>
				<Group>1</Group>
				<Group>2</Group>
				<Group>3</Group>
			</Groups>
			<DisplayFields>
				<DisplayField>
					<DisplayText>Address 1:</DisplayText>
					<DisplayOrder>1</DisplayOrder>
					<DataType>text</DataType>
					<IsRequired>false</IsRequired>
					<Group>1</Group>
					<InputFieldType>input</InputFieldType>
					<InputType>text</InputType>
					<InputID>txtAddress1</InputID>
					<InputTitle>primaryaddress</InputTitle>
					<Validators></Validators>
					<PossibleValues></PossibleValues>
					<DataPath>PrimaryAddress</DataPath>
					<DataSource>Consumer</DataSource>
				</DisplayField>
				<DisplayField>
					<DisplayText>Address 2:</DisplayText>
					<DisplayOrder>2</DisplayOrder>
					<DataType>text</DataType>
					<IsRequired>false</IsRequired>
					<Group>1</Group>
					<InputFieldType>input</InputFieldType>
					<InputType>text</InputType>
					<InputID>txtAddress2</InputID>
					<InputTitle>secondaryaddress</InputTitle>
					<Validators></Validators>
					<PossibleValues></PossibleValues>
					<DataPath>SecondaryAddress</DataPath>
					<DataSource>Consumer</DataSource>
				</DisplayField>
				<DisplayField>
					<DisplayText>City:</DisplayText>
					<DisplayOrder>3</DisplayOrder>
					<DataType>text</DataType>
					<IsRequired>false</IsRequired>
					<Group>2</Group>
					<InputFieldType>input</InputFieldType>
					<InputType>text</InputType>
					<InputID>txtCity</InputID>
					<InputTitle>city</InputTitle>
					<Validators></Validators>
					<PossibleValues></PossibleValues>
					<DataPath>City</DataPath>
					<DataSource>Consumer</DataSource>
				</DisplayField>
				<DisplayField>
					<DisplayText>State:</DisplayText>
					<DisplayOrder>4</DisplayOrder>
					<DataType>text</DataType>
					<IsRequired>false</IsRequired>
					<Group>2</Group>
					<InputFieldType>select</InputFieldType>
					<InputType></InputType>
					<InputID>ddlState</InputID>
					<InputTitle>statevalue</InputTitle>
					<Validators></Validators>
					<PossibleValues>
						<Value>
							<DisplayText>##States##</DisplayText>
							<DisplayValue></DisplayValue>
						</Value>
					</PossibleValues>
					<DataPath>State</DataPath>
					<DataSource>Consumer</DataSource>
				</DisplayField>
				<DisplayField>
					<DisplayText>Zip Code:</DisplayText>
					<DisplayOrder>4</DisplayOrder>
					<DataType>text</DataType>
					<IsRequired>false</IsRequired>
					<Group>2</Group>
					<InputFieldType>input</InputFieldType>
					<InputType>text</InputType>
					<InputID>txtZipCode</InputID>
					<InputTitle>postalcode</InputTitle>
					<Validators>
						<Validator>
							<Type name="type">regex</Type>
							<Regex name="regex">^\\d{5}((-|\\s)?\\d{4})?$</Regex>
							<ValidationField name="validationfield"></ValidationField>
							<ErrorMessage name="errormessage">Invalid Zip Code</ErrorMessage>
							<JSONObject>
								<![CDATA[{type: "regex", regex: "^\\d{5}((-|\\s)?\\d{4})?$", validationfield: "", errormessage: "Invalid Zip Code" }]]>
							</JSONObject>
						</Validator>
					</Validators>
					<PossibleValues></PossibleValues>
					<DataPath>PostalCode</DataPath>
					<DataSource>Consumer</DataSource>
				</DisplayField>
				<DisplayField>
					<DisplayText>Mobile #:</DisplayText>
					<DisplayOrder>4</DisplayOrder>
					<DataType>text</DataType>
					<IsRequired>false</IsRequired>
					<Group>3</Group>
					<InputFieldType>input</InputFieldType>
					<InputType>text</InputType>
					<InputID>txtMobile</InputID>
					<InputTitle>phone</InputTitle>
					<Validators>
						<Validator>
							<Type name="type">regex</Type>
							<Regex name="regex">^(\\(?\\d\\d\\d\\)?)?( |-|\\.)?\\d\\d\\d( |-|\\.)?\\d{4,4}(( |-|\\.)?[ext\\.]+ ?\\d+)?$</Regex>
							<ValidationField name="validationfield"></ValidationField>
							<ErrorMessage name="errormessage">Invalid Phone Number</ErrorMessage>
							<JSONObject>
								<![CDATA[{type: "regex", regex: "^(\\(?\\d\\d\\d\\)?)?( |-|\\.)?\\d\\d\\d( |-|\\.)?\\d{4,4}(( |-|\\.)?[ext\\.]+ ?\\d+)?$", validationfield: "", errormessage: "Invalid Phone Number" }]]>
							</JSONObject>
						</Validator>
					</Validators>
					<PossibleValues></PossibleValues>
					<DataPath>Phone</DataPath>
					<DataSource>Consumer</DataSource>
				</DisplayField>
				<!--<DisplayField>
					<DisplayText>Check to receive specials via text message.</DisplayText>
					<DisplayOrder>4</DisplayOrder>
					<DataType>checkbox</DataType>
					<IsRequired>false</IsRequired>
					<Group>3</Group>
					<InputFieldType>input</InputFieldType>
					<InputType>checkbox</InputType>
					<InputID>chkMobileUpdates</InputID>
					<InputTitle>receiveSMS</InputTitle>
					<Validators></Validators>
					<PossibleValues></PossibleValues>
					<DataPath>ReceiveSMS</DataPath>
					<DataSource>ConsumerSetting</DataSource>
				</DisplayField>-->
			</DisplayFields>
		</Page>
		<Page type="placeholder" value="confirmdietarypreferences">
			<Name>step3</Name>
			<Groups></Groups>
			<DisplayFields></DisplayFields>
		</Page>
		<Page type="placeholder" value="dietarypreferences">
			<Name>step4</Name>
			<Direction>dietary</Direction>
			<Groups></Groups>
			<DisplayFields></DisplayFields>
		</Page>
		<Page type="placeholder" value="thankyou">
			<Name>step5</Name>
			<Groups></Groups>
			<DisplayFields></DisplayFields>
		</Page>
	</Pages>	
	<DietaryPreferencesList>
	  <DietaryPreference>
		<Preference>Vegetarian</Preference>
		<Definition>no meat (beef, pork, poultry)</Definition>
	  </DietaryPreference>
	  <DietaryPreference>
		<Preference>Vegan</Preference>
		<Definition>no animal products- beef, pork, poultry, fish, eggs, dairy (milk, cheese)</Definition>
	  </DietaryPreference>
	  <DietaryPreference>
		<Preference>Kosher</Preference>
		<Definition>food that conforms to strict Jewish biblical laws.</Definition>
	  </DietaryPreference>
	  <DietaryPreference>
		<Preference>Calorie</Preference>
		<Definition>A unit of energy-producing potential equal to this amount of heat that is contained in food and released upon oxidation by the body.</Definition>
	  </DietaryPreference>
	  <DietaryPreference>
		<Preference>Carbohydrate</Preference>
		<Definition>Any of a group of organic compounds that includes sugars, starches, cellulose, and gums and serves as a major energy source.</Definition>
	  </DietaryPreference>
	  <DietaryPreference>
		<Preference>Total Fat</Preference>
		<Definition>Fat Free - Contains less than 0.5 grams of fat per serving Low Fat - Contains less than 3 grams of fat per serving</Definition>
	  </DietaryPreference>
	  <DietaryPreference>
		<Preference>Saturated Fat</Preference>
		<Definition>A fat, most often of animal origin, that is solid at room temperature and whose fatty acid chains cannot incorporate additional hydrogen atoms. An excess of these fats in the diet is thought to raise the cholesterol level in the bloodstream. Saturated Fat Free - Contains less than 0.5 grams of saturated fat per serving</Definition>
	  </DietaryPreference>
	  <DietaryPreference>
		<Preference>Low Saturated Fat</Preference>
		<Definition>Contains less than 1 gram of saturated fat per serving</Definition>
	  </DietaryPreference>
	  <DietaryPreference>
	   <Preference>Cholesterol</Preference>
		<Definition>A white crystalline substance found in animal tissues and various foods, that is normally synthesized by the liver and is important as a constituent of cell membranes and a precursor to steroid hormones. Its level in the bloodstream can influence the pathogenesis of certain conditions, such as the development of atherosclerotic plaque and coronary artery disease. Cholesterol Free - Contains less than 2 mg of cholesterol per serving Low Cholesterol - Contains less than 95 mg of cholesterol per serving</Definition>
	  </DietaryPreference>
	  <DietaryPreference>
		<Preference>Calcium</Preference>
		<Definition>The fifth most abundant element in the earth's crust and an important component of most plants and animals.</Definition>
	  </DietaryPreference>
	  <DietaryPreference>
		<Preference>Iron</Preference>
		<Definition>Present in food systems in three oxidation states: the elemental form (FE0), ferrous iron (Fe+2), and ferric iron.</Definition>
	  </DietaryPreference>
	  <DietaryPreference>
		<Preference>Dietary Fiber</Preference>
		<Definition>Dietary fiber, often called roughage, is that part of cereals and grains, vegetables, fruits, beans, nuts and seeds that people cannot digest. Including more fiber-containing foods in your diet may reduce the risk of major chronic diseases such as cancer and coronary heart disease.</Definition>
	  </DietaryPreference>
	  <DietaryPreference>
		<Preference>Sodium</Preference>
		<Definition>Common table salt Sodium Free - Contains less than 5 mg of sodium per serving</Definition>
	  </DietaryPreference>
	  <DietaryPreference>
		<Preference>Always exclude these ingredient(s)</Preference>
		<Definition>examples: nuts, olives, fish, dairy products</Definition>
	  </DietaryPreference>
	</DietaryPreferencesList>
	<Links>
		<PrivacyPolicy>/Profile/PrivacyPolicy.aspx</PrivacyPolicy>
	</Links>
</SignUpV2>